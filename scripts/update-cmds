#!/usr/bin/env bash

CMD_PATH=$(dirname "$0")

[ -f $CMD_PATH/env.conf ] && source $CMD_PATH/env.conf
DEBUG=1

################################################################
# move some common functions here to reduce dependency
################################################################

### LOGGING ###

NOCOLOR="\e[m"

function color_echo() {
 local color=$1
 local msg=$2

 case $color in
  (red|RED)			color="\e[31m";;
  (green|GREEN)		color="\e[32m";;
  (yellow|YELLOW)	color="\e[33m";;
  (purple|PURPLE)	color="\e[35m";;
  (cyan|CYAN)		color="\e[36m";;
  (orange|ORANGE)	color="\e[91m";;
  (*)				color="$NOCOLOR";;
 esac
 
 echo -e "${color}$msg${NOCOLOR}"
}

function log() {
 local TIMESTAMP=$(date +%Y.%m.%d_%H:%M:%S)
 color_echo green "$TIMESTAMP $1"
 [ "$ENABLE_LOGGING" == "1" ] && echo "$TIMESTAMP $1" >> $LOG
}

function log_error() {
 local TIMESTAMP=$(date +%Y.%m.%d_%H:%M:%S)
 color_echo red "$TIMESTAMP $1"
 [ "$ENABLE_LOGGING" == "1" ] && echo "$TIMESTAMP $1" >> $LOG
}

function debug() {
 [ "$DEBUG" != "1" ] && return

 local TIMESTAMP=$(date +%Y.%m.%d_%H:%M:%S)
 color_echo yellow "$TIMESTAMP $1"
}

### FILES ###

function check_packages() {
 local PACKAGES=$1
 for PACKAGE in ${PACKAGES[*]}; do
  if [ ! -x "$(command -v $PACKAGE)" ]; then
   log_error "Required package not found: $PACKAGE"
   exit
  fi
  # debug "$VAR=${!VAR}"
 done
}

DIFF_CMD="diff --color"
[ -x "$(command -v colordiff)" ] && DIFF_CMD="colordiff"

NEED_CONFIRM="yes"
function copy_file() {
 local source=$1
 local target=$2
 local overwrite=$3

 # see if this is a regular file
 [ ! -f $source ] && return 0
 
 # copy if target does not exist
 if [ ! -f $target ]; then
  log "Copying $target"
  $SUDO cp $source $target
  $SUDO chmod +x $target
  return 1
 fi

 # do not overwrite conf files
 [[ $target == *".conf" ]] && return 0
 
 # ask for confirmation if files are different
 local md5source=( $(md5sum "$source") )
 local md5target=( $(md5sum "$target") )
 [ $md5source == $md5target ] && return 0
 
 # file changed, asking for confirmation
 if [[ "$overwrite" == "overwrite" || "$NEED_CONFIRM" != "yes" ]]; then
  log "Updating $target"
  $SUDO cp $source $target
  $SUDO chmod +x $target
  return 1
 fi

 echo "================= $target ================="
 #diff --color --side-by-side $target $source
 $DIFF_CMD $target $source
 read -p "Overwrite $target (Yes/[No]/All)?" choice
 case "$choice" in
  y|Y )
   log "Updating $target"
   $SUDO cp $source $target
   $SUDO chmod +x $target
   return 1
   ;;
  A|a )
   NEED_CONFIRM="no"
   log "Updating $target"
   $SUDO cp $source $target
   $SUDO chmod +x $target
   return 1
   ;;
  * )
   return 0
   ;;
 esac
}

function copy_files() {
 local files=$1
 local folder=$2

 # use IFS to avoid space-in-file-name issue
 local old=$IFS
 IFS=$(echo -en "\n\b")
 for filepath in $files; do
  filename=$(basename "$filepath")
  target=$folder/$filename
  copy_file $filepath $target
 done
 IFS=old
}

function conditional_copy() {
 local condition="$1"
 local src_folder=$2
 local dst_folder=$3

 # condition is to test if the command exists
 [ ! -x "$(command -v $condition)" ] && return

 #debug "Found command: $condition. Will copy related files to $dst_folder."
 [ ! -d $dst_folder ] && $SUDO mkdir $dst_folder
 copy_files "$src_folder/*" $dst_folder
}

function copy_links() {
 local files=$1
 local folder=$2

 # use IFS to avoid space-in-file-name issue
 local old=$IFS
 IFS=$(echo -en "\n\b")
 for filepath in $files; do
  [ ! -e "$filepath" ] && continue

  filename=$(basename "$filepath")
  link=$folder/$filename
  # see if this is already a link (assuming OK if so, skip using 'readlink -f file'
  [ -h $link ] && continue

  if [ -e $link ]; then
   # file already exists and not link
   log "Deleting non-link file [$link]"
   $SUDO rm $link
  fi

  log "Creating link [$link] -> [$filepath]..."
  $SUDO ln -s $filepath $link
  $SUDO chmod +x $link
 done
 IFS=old
}

function conditional_copy_links() {
 local condition="$1"
 local src_folder=$2
 local dst_folder=$3

 # condition is to test if the command exists
 [ ! -x "$(command -v $condition)" ] && return

 copy_links "$src_folder/*" $dst_folder
}

################################################################

check_packages "unzip"

GITHUB_URL="https://github.com/gadget1999/linux/archive/master.zip"
TMP_ZIP=/tmp/master.zip
TMP_FOLDER=/tmp/linux-master
TMP_CMD_FOLDER=/tmp/linux-master/scripts
CMD_LIB=$CMD_PATH/lib

cd /tmp

rm $TMP_ZIP 2> /dev/null
wget -q $GITHUB_URL
if [ ! -f $TMP_ZIP ]; then
 log_error "Cannot find downloaded file $TMP_ZIP. Internet or github down?"
 exit 1
fi

unzip -qq -o $TMP_ZIP

if !(copy_file $TMP_CMD_FOLDER/update-cmds $CMD_PATH/update-cmds); then
 log "update-cmds was updated, >>>>>> restarting <<<<<<"
 $CMD_PATH/update-cmds
 exit 0
fi

copy_files "$TMP_CMD_FOLDER/*" $CMD_PATH

[ ! -d $CMD_LIB ] && $SUDO mkdir $CMD_LIB
copy_files "$TMP_CMD_FOLDER/lib/*" $CMD_LIB

conditional_copy pwsh $TMP_CMD_FOLDER/azure $CMD_PATH/azure
conditional_copy adb $TMP_CMD_FOLDER/android $CMD_PATH/android
conditional_copy_links adb $CMD_PATH/android $CMD_PATH
conditional_copy docker $TMP_CMD_FOLDER/docker $CMD_PATH/docker
conditional_copy_links docker $CMD_PATH/docker $CMD_PATH
conditional_copy mosquitto_sub $TMP_CMD_FOLDER/mosquitto $CMD_PATH/mosquitto
conditional_copy_links mosquitto_sub $CMD_PATH/mosquitto $CMD_PATH
conditional_copy python3 $TMP_CMD_FOLDER/python $CMD_PATH/python
conditional_copy docker-compose $TMP_CMD_FOLDER/kubernetes $CMD_PATH/kubernetes

rm -R $TMP_FOLDER
rm $TMP_ZIP
