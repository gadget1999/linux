#!/usr/bin/env bash

CMD_PATH=$(dirname "$0")
source $CMD_PATH/lib/common.sh
source $CMD_PATH/lib/docker.sh
source $CMD_PATH/lib/certificate.sh

check_cert_env

check_env "SSR_PASSWORD DDNS_DOMAIN CERT_ROOT"

CONTAINER="ssr"
IMAGE="acrisliu/shadowsocks-libev"

PORT=443
if [ "$SSR_PORT" != "" ]; then
 log "Use port: $SSR_PORT"
 PORT=$SSR_PORT
fi

[ "$1" == "tls" ] && SSR_MODE="tls"
case $SSR_MODE in
 tls)
  log "Using TLS mode V2Ray"
  V2RAY_OPTS="server;tls;host=$DDNS_DOMAIN"
  ;;
 *)
  log "Using QUIC mode V2Ray (default)"
  V2RAY_OPTS="server;mode=quic;host=$DDNS_DOMAIN"
  ;;
esac
[ "$1" == "debug" ] && V2RAY_OPTS="$V2RAY_OPTS;loglevel=debug"

# only use custom path for ECC type as v2ray cannot handle it
CONTAINER_CERT_ROOT=/root/.acme.sh
if [ "$CERT_TYPE" == "ecc" ]; then
 CERT_OPTS="cert=$CONTAINER_CERT_ROOT/$CERT_FULLCHAIN;key=$CONTAINER_CERT_ROOT/$CERT_KEY"
 V2RAY_OPTS="$V2RAY_OPTS;$CERT_OPTS"
fi
#debug "V2Ray options: $V2RAY_OPTS"
V2RAY_ARGS="ARGS=--plugin v2ray-plugin --plugin-opts $V2RAY_OPTS"

debug "Stop current container"
stop_container $CONTAINER

EXTRA_OPTS=(
 -e "$V2RAY_ARGS"
 -v $CERT_ROOT:$CONTAINER_CERT_ROOT
 -e PASSWORD=$SSR_PASSWORD
 -e DNS_ADDRS=176.103.130.130,176.103.130.131
 -p $PORT:8388
 -p $PORT:8388/udp
 )

if [ "$1" != "debug" ]; then
 new_stateless_container $CONTAINER $IMAGE EXTRA_OPTS
else
 new_tmp_container $CONTAINER $IMAGE EXTRA_OPTS entrypoint
fi
