#!/usr/bin/env bash

CMD_PATH=$(dirname "$0")
source $CMD_PATH/lib/common.sh
source $CMD_PATH/lib/docker.sh
source $CMD_PATH/lib/certificate.sh

check_cert_env

check_env "SSR_PASSWORD DDNS_DOMAIN CERT_STORAGE CONTAINER_UID"

CONTAINER="ssr"
IMAGE="acrisliu/shadowsocks-libev"

# for Android, use this v2ray plug-in: https://github.com/teddysun/v2ray-plugin-android/releases

PORT=443
if [ "$SSR_PORT" != "" ]; then
 log "Use port: $SSR_PORT"
 PORT=$SSR_PORT
fi

[ "$1" == "tls" ] && SSR_MODE="tls"
case $SSR_MODE in
 tls)
  log "Using TLS mode V2Ray"
  V2RAY_OPTS="server;tls;host=$DDNS_DOMAIN"
  ;;
 *)
  log "Using QUIC mode V2Ray (default)"
  V2RAY_OPTS="server;mode=quic;host=$DDNS_DOMAIN"
  ;;
esac
[ "$1" == "debug" ] && V2RAY_OPTS="$V2RAY_OPTS;loglevel=debug"

# only use custom path for ECC type as v2ray cannot handle it
CONTAINER_CERT_ROOT=/config/.acme.sh
if [ "$CERT_TYPE" == "ecc" ]; then
 CERT_OPTS="cert=$CONTAINER_CERT_ROOT/fullchain.pem;key=$CONTAINER_CERT_ROOT/privkey.pem"
 V2RAY_OPTS="$V2RAY_OPTS;$CERT_OPTS"
fi
#debug "V2Ray options: $V2RAY_OPTS"
V2RAY_ARGS="ARGS=--plugin v2ray-plugin --plugin-opts $V2RAY_OPTS"

grant_container_access $CERT_STORAGE

MAX_RAM="100m"
EXTRA_OPTS=(
 --read-only
 --restart unless-stopped
 --tmpfs /run
 -e "$V2RAY_ARGS"
 -v $CERT_STORAGE:$CONTAINER_CERT_ROOT:ro
 -e PASSWORD=$SSR_PASSWORD
 -e DNS_ADDRS=208.67.222.222,208.67.220.220
 -p $PORT:8388
 -p $PORT:8388/udp
 -u $CONTAINER_UID
 -m $MAX_RAM
 )

ENTRYPOINT=()

[ "$1" == "debug" ] && DEBUG_DOCKER=1
new_container_service $CONTAINER $IMAGE EXTRA_OPTS ENTRYPOINT
