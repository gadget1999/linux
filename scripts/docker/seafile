#!/usr/bin/env bash

CMD_PATH=$(dirname "$0")
source $CMD_PATH/lib/common.sh
source $CMD_PATH/lib/docker.sh
source $CMD_PATH/lib/certificate.sh

check_env "SEAFILE_DATA SEAFILE_DB_KEY SEAFILE_ADMIN SEAFILE_PASSWORD SEAFILE_PORT"
check_packages "docker-compose docker"
check_cert_env

export SEAFILE_PORT
export SEAFILE_DB_KEY
export SEAFILE_ADMIN
export SEAFILE_PASSWORD
export SEAFILE_FQDN=$DDNS_DOMAIN
export SEAFILE_DATA

SEAFILE_SSL=$SEAFILE_DATA/data/ssl
[ ! -d $SEAFILE_SSL ] && sudo mkdir $SEAFILE_SSL
cp $CERT_ROOT/$CERT_FULLCHAIN $SEAFILE_SSL/$DDNS_DOMAIN.crt
cp $CERT_ROOT/$CERT_KEY $SEAFILE_SSL/$DDNS_DOMAIN.key

POD="seafile"
COMPOSE_FILE_ROOT="$CMD_PATH/kubernetes"
STATEFUL_CONTAINERS=($POD)
STATELESS_CONTAINERS=(seafile-mysql seafile-memcached)

#########################
# Helper functions
#########################

function stop_pod() {
 local -n stateful_containers=$1
 local -n stateless_containers=$2

 for instance in ${stateful_containers[*]}; do
  stop_container $instance
 done

 for instance in ${stateless_containers[*]}; do
  stop_container $instance
  #delete_container $instance
 done
}

function delete_pod() {
 local -n stateful_containers=$1
 local -n stateless_containers=$2

 for instance in ${stateful_containers[*]}; do
  delete_container $instance
 done

 for instance in ${stateless_containers[*]}; do
  delete_container $instance
 done
}

function new_pod() {
 local compose_file=$1

 local detach_mode="-d"
 [ "$DEBUG_POD" != "" ] && detach_mode=""

 debug "Starting pod from $compose_file..."
 docker-compose -f $compose_file up $detach_mode
 
 sleep 10

 upgrade_container_os $POD
 upgrade_seafile_nginx $POD
}

function start_pod() {
 local pod_name=$1
 local compose_file="$COMPOSE_FILE_ROOT/$pod_name/docker-compose.yaml"
 local -n stateful_containers=$2
 local -n stateless_containers=$3

 if [ $(container_exists $pod_name) != "true" ]; then
  # use docker-compose to create dependencies
  new_pod $compose_file
  return
 fi

 # just restart the containers as everything already configured
 # (later on try 'docker-compose start')
 for instance in ${stateless_containers[*]}; do
  start_container $instance
 done

 for instance in ${stateful_containers[*]}; do
  start_container $instance
 done
}

function upgrade_container_os() {
 local container_name=$1
 local DOCKER_CMD="docker exec $container_name"

 debug "Upgrading container OS..."
 $DOCKER_CMD apt-get update
 $DOCKER_CMD apt-get -y dist-upgrade
 $DOCKER_CMD apt-get -y autoremove

 debug "Restarting container..."
 stop_container $container_name
 start_container $container_name
}

function upgrade_seafile_nginx() {
 local container_name=$1
 local DOCKER_CMD="docker exec seafile"

 debug "Adding nginx repo..."
 $DOCKER_CMD add-apt-repository ppa:nginx/stable
 debug "Upgrading nginx..."
 $DOCKER_CMD apt-get update
 $DOCKER_CMD apt-get install -y nginx
 $DOCKER_CMD apt-get -y autoremove

 # fix seafile CSRF issue caused by container port mapping
 # more details: https://github.com/haiwen/seafile-docker/issues/134
 # also use more secure conf file
 GOOD_NGINX_CONF=$SEAFILE_DATA/data/seafile/conf/seafile.nginx.conf
 debug "Updating nginx conf..."
 docker cp $GOOD_NGINX_CONF seafile:/etc/nginx/sites-enabled/seafile.nginx.conf
 
 debug "Restarting container..."
 stop_container $container_name
 start_container $container_name
}

#########################
# Main entrance
#########################

case $1 in
 stop)
  stop_pod STATEFUL_CONTAINERS STATELESS_CONTAINERS
  ;;
 delete)
  delete_pod STATEFUL_CONTAINERS STATELESS_CONTAINERS
  ;;
 upgrade)
  upgrade_container_os $POD
  upgrade_seafile_nginx $POD
  ;;
 debug)
  DEBUG_POD=1
  start_pod $POD STATEFUL_CONTAINERS STATELESS_CONTAINERS
  ;;
 *)
  start_pod $POD STATEFUL_CONTAINERS STATELESS_CONTAINERS
  ;;
esac
