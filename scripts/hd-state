#!/usr/bin/env bash

CMD_PATH=$(dirname "$0")
source $CMD_PATH/lib/common.sh
DEBUG=1

lock

# Specify any drives you want to ignore; separate multiple drives by spaces; e.g. "sda sdb"
IGNORE_DRIVES=""

SUDO="sudo"
SPINDOWN_FLAG=/tmp/spindown
DISKSTATS1=/tmp/diskstats_1
DISKSTATS2=/tmp/diskstats_2

check_packages "hdparm"

function get_diskstats() {
 if [ ! -f $DISKSTATS1 ]; then
  # if no stat files yet, record and exit
  debug "First run after reboot."
  $SUDO cat /proc/diskstats > $DISKSTATS1
  exit 0
 fi

 # rolling stat files
 $SUDO mv $DISKSTATS1 $DISKSTATS2
 $SUDO cat /proc/diskstats > $DISKSTATS1
}

function reset_diskstats() {
# get_diskstats
# get_diskstats
 return
}

# seems after a recent system update, hdparm -C will always cause diskstats to increase
# even without waking up the disk. reset diskstats after every hdparm calls
function spindown_disk() {
 local disk=$1
 local flag="$SPINDOWN_FLAG.$disk"

 # Check if drive exists
 if [ ! -e /dev/$disk ]; then
  error "/dev/$disk does not exist."
  return
 fi

 # Check if drive has activities since last run
 # test the partition instead of drive to avoid interference from hdparm
 if [ "$(diff $DISKSTATS1 $DISKSTATS2 | grep "$disk""1" )" !=  "" ]; then
  # noticed strange thing that diskstats changes between checks but disk not woke up
  if [ "$($SUDO hdparm -C /dev/$disk | grep state)" = " drive state is:  active/idle" ]; then
   log "/dev/$disk running"
   [ -e $flag ] && $SUDO rm $flag
  else
   log "/dev/$disk ----"
  fi
  reset_diskstats
  return 
 fi

 # Spin down if not yet
 if [ ! -e $flag ]; then
  log "Spin down /dev/$disk"
  $SUDO hdparm -y /dev/$disk
  $SUDO touch $flag
  reset_diskstats
  return
 fi

 # Already spindown, verify status
 if [ "$($SUDO hdparm -C /dev/$disk | grep state)" = " drive state is:  active/idle" ]; then
  log "/dev/$disk running (unexpected)"
 else
  log "/dev/$disk ...."
 fi
 reset_diskstats
}

get_diskstats

# Find all removable USB drives, so we can ignore them later,
# see http://unix.stackexchange.com/questions/40143/how-to-know-if-dev-sdx-is-a-connected-usb-or-hdd
REMOVABLE_DRIVES=""
#debug "Getting list of removable drives..."
for _device in /sys/block/s*; do
 _disk=$(echo "$_device" | cut -f4 -d/)
 #debug "checking $_device ($_disk)..."
 if [ -f $_device/removable ] && [ $(<$_device/removable) -gt 0 ]; then
  #debug "found removable disk: $_device ($_disk)"
  REMOVABLE_DRIVES="$REMOVABLE_DRIVES $_disk"
 fi
done

# Append detected removable drives to manually ignored drives
IGNORE_DRIVES="$IGNORE_DRIVES $REMOVABLE_DRIVES"
#debug "list of ignored drives: $IGNORE_DRIVES"

# Loop through all the array disks and spin down the idle disks.
# Will find all drives sda -> sdz AND sdaa -> sdaz...
for disk in `find /dev/ -regex '/dev/sd[a-z]+' | cut -d/ -f3`
do
 # Skip removable USB drives and those the user wants to ignore
 if [[ $IGNORE_DRIVES =~ $disk ]]; then
  continue
 fi

 # Skip SSDs
 if [[ $(cat /sys/block/$disk/queue/rotational) -eq 0 ]]; then
  continue
 fi

 # spin down disk
 spindown_disk $disk
done
