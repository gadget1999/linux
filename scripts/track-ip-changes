#!/usr/bin/env bash

CMD_PATH=$(dirname "$0")
source $CMD_PATH/lib/common.sh
source $CMD_PATH/lib/email.sh

check_env "MAIN_EMAIL"
check_email_env

CHECK_INTERVAL=600
IP_CACHE=/tmp/ip-cache

# single instance
lock

touch $IP_CACHE

function invoke_azvm_api {
 check_packages "python3"
 check_env "AZURE_TENANT_ID AZURE_APP_ID AZURE_APP_KEY"

 export AZURE_TENANT_ID
 export AZURE_APP_ID
 export AZURE_APP_KEY

 "$PYTHON_VENV"python3 $CMD_PATH/python/azure-vm.py $@
 [ "$?" != "0" ] && invoke_azvm_api="$?"
}

function update_ip_whitelist {
 check_env "AZURE_NSG_RULES"
 [ "$AZURE_NSG_RULES" == "" ] && return

 local new_ip=$1
 local old_ip=$2
 for RULE in ${AZURE_NSG_RULES[*]}; do
  log "Updating new IP $new_ip (old IP:$old_ip) with NSG rules ($RULE)"

  invoke_azvm_api update-ip $RULE $new_ip $old_ip
  if [ "$invoke_azvm_api" != "" ]; then
   update_ip_whitelist="Failed to add $new_ip to Azure NSG. Please check manually."
  else
   update_ip_whitelist="Adding $new_ip to Azure NSG succeeded."
  fi
 done
}

function notify_ip_change {
 local new_ip=$1
 local old_ip=$2

 debug "Sending email notification to $MAIN_EMAIL"
 send_email \
  $MAIN_EMAIL \
  "Public IP changed from [$old_ip] to [$new_ip]" \
  "$update_ip_whitelist"
}

# track IP changes, can take FQDN as input, or just check public IP
function check_ip_change {
 local fqdn=$1
 local old_ip=$(cat $IP_CACHE)
 local new_ip=$($CMD_PATH/public-ip)

 if [ "$fqdn" != "" ]; then
  new_ip=$(dig @1.1.1.1 $fqdn +short | tail -1)
  debug "$fqdn -> IP: $new_ip"
 fi

 debug "Old IP: $old_ip;  New IP: $new_ip"
 if [ "$new_ip" == "" ]; then
  error "Failed to get public IP."
  return
 fi

 [ "$new_ip" == "$old_ip" ] && return

 echo $new_ip > $IP_CACHE
 
 # if old_ip is empty, most likely first run
 [ "$old_ip" == "" ] && return

 # update IP whitelist
 update_ip_whitelist $new_ip $old_ip

 # send email to notify
 notify_ip_change $new_ip $old_ip
}

FQDN=$1
while true; do
 check_ip_change $FQDN

 sleep $CHECK_INTERVAL
done
